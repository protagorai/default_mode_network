name: CD

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  POETRY_VERSION: 1.6.1
  PYTHON_VERSION: "3.10"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    name: Build and test package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --with dev,test

    - name: Run full test suite
      run: |
        poetry run pytest tests/ -v --tb=short --cov=src --cov-report=xml

    - name: Build package
      run: |
        poetry build

    - name: Check package
      run: |
        pip install twine
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  build-docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} evaluation

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-and-test, build-docker]
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    environment:
      name: pypi
      url: https://pypi.org/p/synthetic-default-mode-network

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/synthetic-default-mode-network

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        verbose: true

  create-github-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        echo "## Changes" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "This release includes the latest updates and improvements." >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Installation" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "pip install synthetic-default-mode-network==${{ github.event.inputs.version }}" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Docker" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ github.event.inputs.version }}" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release v${{ github.event.inputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: sdmn-dist-${{ github.event.inputs.version }}
        asset_content_type: application/zip

  deploy-docs:
    name: Deploy documentation
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --with dev

    - name: Build documentation
      run: |
        cd docs
        poetry run sphinx-build -b html . _build/html

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        cname: sdmn-docs.github.io

  notification:
    name: Send notifications
    runs-on: ubuntu-latest
    needs: [publish-pypi, build-docker, deploy-docs]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.publish-pypi.result == 'success'
      run: |
        echo "‚úÖ Release completed successfully!"
        echo "üì¶ Package published to PyPI"
        echo "üê≥ Docker image pushed to registry"
        echo "üìö Documentation deployed"

    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Release failed!"
        echo "Check the logs for details."
